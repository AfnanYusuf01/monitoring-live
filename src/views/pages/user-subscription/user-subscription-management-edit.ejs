<% layout("layouts/main") %>
<div class="min-h-screen bg-gray-50">
  <!-- Header dengan judul dan tombol kembali -->
  <div class="px-6 pt-6">
    <div class="flex flex-wrap justify-between items-center mb-6">
      <div class="flex items-center">
        <a href="/user-subscription-management" class="mr-3 text-gray-500 hover:text-gray-700">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
          </svg>
        </a>
        <h6 class="text-xl font-semibold text-gray-800">Edit User Subscription</h6>
      </div>
    </div>
  </div>

  <!-- Form container -->
  <div class="flex flex-wrap px-6">
    <div class="w-full">
      <div class="relative flex flex-col min-w-0 mb-6 break-words bg-white border-0 border-transparent border-solid rounded-lg">
        <!-- Card header -->
        <div class="px-6 py-4 mb-0 bg-white border-b border-gray-200 rounded-t-lg">
          <h6 class="text-lg font-semibold text-gray-800">Form Edit User Subscription</h6>
        </div>
        
        <!-- Card body -->
        <div class="flex-auto px-6 py-4">
          <form id="user-subscription-form" action="/api/user-subscriptions/<%= userSubscription.id %>" method="POST">
            <input type="hidden" name="_method" value="PUT">
            
            <div class="mb-4">
              <label for="userId" class="block text-sm font-medium text-gray-700 mb-2">User *</label>
              <select id="userId" name="userId" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors">
                <option value="">Pilih User</option>
                <% users.forEach(user => { %>
                  <option value="<%= user.id %>" <%= userSubscription.userId === user.id ? 'selected' : '' %>>
                    <%= user.name %> (<%= user.email %>)
                  </option>
                <% }) %>
              </select>
            </div>
            
            <div class="mb-4">
              <label for="subscriptionId" class="block text-sm font-medium text-gray-700 mb-2">Subscription *</label>
              <select id="subscriptionId" name="subscriptionId" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors">
                <option value="">Pilih Subscription</option>
                <% subscriptions.forEach(subscription => { %>
                  <option value="<%= subscription.id %>" <%= userSubscription.subscriptionId === subscription.id ? 'selected' : '' %> data-duration="<%= subscription.duration %>">
                    <%= subscription.name %> - Rp <%= subscription.price.toLocaleString('id-ID') %> (<%= subscription.duration %> hari)
                  </option>
                <% }) %>
              </select>
            </div>
            
            <div class="mb-4">
              <label for="startDate" class="block text-sm font-medium text-gray-700 mb-2">Tanggal Mulai *</label>
              <input type="date" id="startDate" name="startDate" value="<%= new Date(userSubscription.startDate).toISOString().split('T')[0] %>" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors">
            </div>
            
            <div class="mb-4">
              <label for="endDate" class="block text-sm font-medium text-gray-700 mb-2">Tanggal Berakhir *</label>
              <input type="date" id="endDate" name="endDate" value="<%= new Date(userSubscription.endDate).toISOString().split('T')[0] %>" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors">
            </div>
            
            <!-- Tambahkan field status di sini -->
            <div class="mb-4">
              <label for="status" class="block text-sm font-medium text-gray-700 mb-2">Status *</label>
              <select id="status" name="status" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors">
                <option value="">Pilih Status</option>
                <option value="active" <%= userSubscription.status === 'active' ? 'selected' : '' %>>Active</option>
                <option value="expired" <%= userSubscription.status === 'expired' ? 'selected' : '' %>>Expired</option>
                <option value="canceled" <%= userSubscription.status === 'canceled' ? 'selected' : '' %>>Canceled</option>
              </select>
            </div>
            
            <!-- Tambahkan field lainnya sesuai kebutuhan API -->
            <div class="mb-4">
              <label for="amount" class="block text-sm font-medium text-gray-700 mb-2">Amount</label>
              <input type="number" id="amount" name="amount" value="<%= userSubscription.amount || '' %>" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors">
            </div>
            
            <div class="mb-4">
              <label for="paymentMethod" class="block text-sm font-medium text-gray-700 mb-2">Payment Method</label>
              <select id="paymentMethod" name="paymentMethod" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors">
                <option value="">Pilih Payment Method</option>
                <option value="bank_transfer" <%= userSubscription.paymentMethod === 'bank_transfer' ? 'selected' : '' %>>Bank Transfer</option>
                <option value="credit_card" <%= userSubscription.paymentMethod === 'credit_card' ? 'selected' : '' %>>Credit Card</option>
                <option value="e_wallet" <%= userSubscription.paymentMethod === 'e_wallet' ? 'selected' : '' %>>E-Wallet</option>
                <option value="other" <%= userSubscription.paymentMethod === 'other' ? 'selected' : '' %>>Other</option>
              </select>
            </div>
            
            <div class="mb-4">
              <label for="transactionId" class="block text-sm font-medium text-gray-700 mb-2">Transaction ID</label>
              <input type="text" id="transactionId" name="transactionId" value="<%= userSubscription.transactionId || '' %>" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors">
            </div>
          </form>
        </div>
        
        <!-- Card footer -->
        <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
          <a href="/user-subscription-management" class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 transition-colors">
            Batal
          </a>
          <button type="submit" form="user-subscription-form" class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors">
            Simpan
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('user-subscription-form');
    const subscriptionSelect = document.getElementById('subscriptionId');
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');
    const amountInput = document.getElementById('amount');
    
    // Fungsi untuk menghitung tanggal berakhir berdasarkan tanggal mulai dan durasi
    function calculateEndDate() {
      const selectedOption = subscriptionSelect.options[subscriptionSelect.selectedIndex];
      const duration = selectedOption ? parseInt(selectedOption.getAttribute('data-duration')) : 0;
      const startDate = new Date(startDateInput.value);
      
      if (duration && !isNaN(startDate.getTime())) {
        const endDate = new Date(startDate);
        endDate.setDate(startDate.getDate() + duration);
        endDateInput.value = endDate.toISOString().split('T')[0];
      }
    }
    
    // Fungsi untuk mengisi amount berdasarkan subscription yang dipilih
    function updateAmount() {
      const selectedOption = subscriptionSelect.options[subscriptionSelect.selectedIndex];
      if (selectedOption && selectedOption.value !== "") {
        const priceText = selectedOption.textContent;
        const priceMatch = priceText.match(/Rp ([\d.,]+)/);
        if (priceMatch) {
          const price = parseFloat(priceMatch[1].replace(/\./g, '').replace(',', '.'));
          amountInput.value = price;
        }
      }
    }
    
    // Event listener untuk perubahan pada dropdown subscription
    subscriptionSelect.addEventListener('change', function() {
      calculateEndDate();
      updateAmount();
    });
    
    // Event listener untuk perubahan pada tanggal mulai
    startDateInput.addEventListener('change', calculateEndDate);
    
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = new FormData(form);
      const data = {
        userId: parseInt(formData.get('userId')),
        subscriptionId: parseInt(formData.get('subscriptionId')),
        startDate: formData.get('startDate'),
        endDate: formData.get('endDate'),
        status: formData.get('status'),
        amount: formData.get('amount') ? parseFloat(formData.get('amount')) : null,
        paymentMethod: formData.get('paymentMethod'),
        transactionId: formData.get('transactionId')
      };
      
      // Validasi
      if (!data.userId) {
        alert('User harus dipilih');
        return;
      }
      
      if (!data.subscriptionId) {
        alert('Subscription harus dipilih');
        return;
      }
      
      if (!data.startDate) {
        alert('Tanggal mulai harus diisi');
        return;
      }
      
      if (!data.endDate) {
        alert('Tanggal berakhir harus diisi');
        return;
      }
      
      if (!data.status) {
        alert('Status harus dipilih');
        return;
      }
      
      // Validasi tanggal
      const startDate = new Date(data.startDate);
      const endDate = new Date(data.endDate);
      
      if (endDate <= startDate) {
        alert('Tanggal berakhir harus setelah tanggal mulai');
        return;
      }
      
      try {
        const response = await fetch(form.action, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        });
        
        if (response.ok) {
          const result = await response.json();
          window.location.href = '/user-subscription-management?success=' + encodeURIComponent(result.message || 'User subscription berhasil diperbarui');
        } else {
          const errorData = await response.json();
          alert('Gagal memperbarui user subscription: ' + (errorData.error || 'Error tidak diketahui'));
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Gagal memperbarui user subscription: ' + error.message);
      }
    });
  });
</script>