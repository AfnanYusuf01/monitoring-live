<% layout("layouts/main") %>

<div class="min-h-screen bg-gray-50">
  <div class="flex flex-wrap -mx-3">
    <div class="flex-none w-full max-w-full px-3">
      <div class="relative flex flex-col min-w-0 mb-6 break-words bg-white border-0 border-transparent border-solid rounded-2xl bg-clip-border">
        <div class="p-6 pb-0 mb-0 bg-white border-b-0 border-b-solid rounded-t-2xl border-b-transparent">
          <div class="flex flex-wrap justify-between items-center">
            <div>
              <h6 class="mb-0 font-bold text-slate-700 text-2xl">Dashboard Pembayaran Studio</h6>
              <p class="text-sm text-slate-500 mt-1">Data pembayaran 7 hari terakhir</p>
            </div>
            <div class="flex space-x-2">
              <button id="refresh-data-btn" class="hidden px-5 py-3 text-sm font-bold text-white uppercase transition-all bg-gradient-to-r from-blue-500 to-blue-600 rounded-xl ease-soft-in tracking-tight-soft shadow-soft-md bg-150 bg-x-25 hover:scale-105 active:opacity-85 flex items-center">
                <!-- <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                Refresh Data -->
              </button>
            </div>  
          </div>
          <div class="mt-4 text-sm text-slate-500 flex items-center">
            <span id="refresh-status" class="flex items-center">
              <span class="w-3 h-3 rounded-full bg-gray-400 mr-2" id="status-indicator"></span>
              Data dimuat
            </span>
            <span id="last-updated" class="ml-4"></span>
          </div>
        </div>

        <!-- Container untuk card studio -->
        <div class="flex flex-wrap px-6 py-4">
          <div id="studio-container" class="w-full grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            <!-- Data studio akan dimuat di sini -->
          </div>
          
          <!-- Loading indicator -->
          <div id="loading-indicator" class="w-full flex justify-center py-12">
            <div class="flex flex-col items-center">
              <div class="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-500 mb-4"></div>
              <p class="text-blue-600 font-medium">Memuat data pembayaran studio...</p>
            </div>
          </div>
          
          <!-- Empty state -->
          <div id="empty-state" class="w-full text-center py-12 hidden">
            <div class="inline-flex items-center justify-center w-20 h-20 rounded-full bg-blue-50 mb-4">
              <svg class="w-10 h-10 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-4m-8 0H5m2 0h4M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
              </svg>
            </div>
            <h3 class="mt-4 text-lg font-medium text-gray-900">Tidak ada data pembayaran</h3>
            <p class="mt-1 text-sm text-gray-500">Belum ada data pembayaran untuk studio dalam 7 hari terakhir.</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .metric-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 0.5rem;
  }
  
  .metric-item {
    background: #f8fafc;
    border-radius: 0.5rem;
    padding: 0.75rem;
    border: 1px solid #e2e8f0;
  }
  
  .metric-label {
    font-size: 0.7rem;
    color: #64748b;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }
  
  .metric-value {
    font-size: 1rem;
    font-weight: 700;
    color: #1e293b;
    margin-top: 0.25rem;
  }
  
  .studio-card {
    transition: all 0.3s ease;
    height: fit-content;
  }
  
  .studio-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }
  
  .status-badge {
    font-size: 0.7rem;
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    font-weight: 600;
  }
  
  .status-paid {
    background-color: #dcfce7;
    color: #166534;
  }
  
  .status-pending {
    background-color: #fef3c7;
    color: #92400e;
  }
  
  .status-other {
    background-color: #e5e7eb;
    color: #374151;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const studioContainer = document.getElementById('studio-container');
    const loadingIndicator = document.getElementById('loading-indicator');
    const emptyState = document.getElementById('empty-state');
    const refreshBtn = document.getElementById('refresh-data-btn');
    const refreshStatus = document.getElementById('refresh-status');
    const statusIndicator = document.getElementById('status-indicator');
    const lastUpdated = document.getElementById('last-updated');
    
    // Fungsi untuk memformat angka dengan pemisah ribuan
    function formatNumber(num) {
      return new Intl.NumberFormat('id-ID').format(num);
    }
    
    // Fungsi untuk memformat mata uang
    function formatCurrency(amount) {
      return new Intl.NumberFormat('id-ID', {
        style: 'currency',
        currency: 'IDR',
        minimumFractionDigits: 0
      }).format(amount);
    }
    
    // Fungsi untuk membuat badge status
    function getStatusBadge(status, count) {
      let className = 'status-other';
      if (status.includes('Dibayar') || status === 'SUCCESS' || status === 'PAID') {
        className = 'status-paid';
      } else if (status.includes('Tunda') || status === 'PENDING') {
        className = 'status-pending';
      }
      
      return `<span class="status-badge ${className}">${status}: ${count}</span>`;
    }
    
    // Fungsi untuk memuat data pembayaran studio
    function loadPaymentData() {
      loadingIndicator.classList.remove('hidden');
      emptyState.classList.add('hidden');
      
      fetch('/api/cek-pembayaran-studio', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      })
        .then(response => response.json())
        .then(data => {
          loadingIndicator.classList.add('hidden');
          
          if (data.success && data.data && data.data.length > 0) {
            renderStudios(data.data);
            emptyState.classList.add('hidden');
          } else {
            studioContainer.innerHTML = '';
            emptyState.classList.remove('hidden');
          }
          
          // Update last updated time
          lastUpdated.textContent = `Terakhir diperbarui: ${new Date().toLocaleTimeString()}`;
        })
        .catch(error => {
          console.error('Error fetching payment data:', error);
          loadingIndicator.classList.add('hidden');
          studioContainer.innerHTML = `
            <div class="w-full col-span-full py-8 text-center">
              <div class="text-red-500 font-medium">Gagal memuat data pembayaran</div>
              <button onclick="loadPaymentData()" class="mt-2 px-4 py-2 text-sm bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200">
                Coba Lagi
              </button>
            </div>
          `;
        });
    }
    
    // Fungsi untuk merender card studio dengan data pembayaran
    function renderStudios(studios) {
      studioContainer.innerHTML = studios.map(studio => {
        const hasPayments = studio.total_transaksi > 0;
        
        // Generate status badges
        const statusBadges = Object.entries(studio.status_counts || {})
          .map(([status, count]) => getStatusBadge(status, count))
          .join(' ');
        
        return `
        <div class="studio-card bg-white rounded-2xl shadow-soft-xl overflow-hidden border border-gray-100">
          <div class="p-6">
            <div class="flex justify-between items-start mb-4">
              <h3 class="text-lg font-bold text-slate-800">${studio.nama_studio}</h3>
              <div class="flex items-center">
                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold ${hasPayments ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}">
                  ${hasPayments ? 'üí∞ Ada Pembayaran' : '‚ùå Tidak Ada'}
                </span>
              </div>
            </div>
            
            <div class="metric-grid mb-4">
              <div class="metric-item">
                <div class="metric-label">Jumlah Akun</div>
                <div class="metric-value">${formatNumber(studio.jumlah_akun)}</div>
              </div>
              <div class="metric-item">
                <div class="metric-label">Total Komisi</div>
                <div class="metric-value">${formatCurrency(studio.total_komisi)}</div>
              </div>
              <div class="metric-item">
                <div class="metric-label">Total Transaksi</div>
                <div class="metric-value">${formatNumber(studio.total_transaksi)}</div>
              </div>
              <div class="metric-item col-span-2">
                <div class="metric-label">Status Pembayaran</div>
                <div class="flex flex-wrap gap-1 mt-1">
                  ${statusBadges || '<span class="text-xs text-gray-500">Tidak ada data status</span>'}
                </div>
              </div>
            </div>
            
            <div class="flex justify-between items-center mt-4 pt-4 border-t border-gray-100">
              <a href="/studio/${studio.studio_id}/pembayaran" class="text-sm font-medium text-blue-600 hover:text-blue-800">
                Lihat Detail Pembayaran ‚Üí
              </a>
            </div>
          </div>
        </div>
        `;
      }).join('');
    }
    
    // Event listener untuk tombol refresh data
    refreshBtn.addEventListener('click', function() {
      loadPaymentData();
      
      // Update UI status
      refreshStatus.textContent = 'Memperbarui data...';
      refreshStatus.classList.add('text-blue-600');
      statusIndicator.classList.add('bg-blue-500');
      
      // Kembalikan status setelah 3 detik
      setTimeout(() => {
        refreshStatus.textContent = 'Data dimuat';
        refreshStatus.classList.remove('text-blue-600');
        statusIndicator.classList.remove('bg-blue-500');
      }, 3000);
    });
    
    // Load data awal
    loadPaymentData();
  });
</script>