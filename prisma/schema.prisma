generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String?
  nomor_wa  String?
  role      String    @default("user")
  isAffiliate Boolean @default(false)
  createdAt DateTime  @default(now())

  akun      Akun[]
  studio    Studio[]
  userSubscriptions UserSubscription[]
  affiliates Affiliate[]
}

model Affiliate {
  id            Int      @id @default(autoincrement())
  userId        Int
  komisi        Float    @default(0)
  totalDibayar  Float    @default(0)
  metodeBayar   String?
  provider      String?
  nomorTujuan   String?
  namaPemilik   String?
  lastPaidAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id])
  affiliateOrders AffiliateOrder[]
  orders        Order[]
}

model Akun {
  id         BigInt   @id // pakai BigInt kalau user_id sangat besar
  nama_akun  String?
  email      String?  
  phone      String?  
  cookie     String?  @db.Text
  createdAt  DateTime @default(now())
  deletedAt  DateTime?

  studioId   Int?
  studio     Studio?  @relation(fields: [studioId], references: [id])

  userId     Int
  user       User     @relation(fields: [userId], references: [id])

  performanceLiveStreams PerformanceLiveStream[]
}


model Studio {
  id          Int      @id @default(autoincrement())
  nama_studio String?
  catatan     String?  @db.Text

  akun        Akun[]
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

model Subscription {
  id          Int       @id @default(autoincrement())
  name        String
  description String?   @db.Text
  price       Float
  duration    Int?
  limitAkun   Int       @default(1)
  komisi      Float     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userSubscriptions UserSubscription[]
}

enum UserSubscriptionStatus {
  active
  expired
  canceled
}

model UserSubscription {
  id              Int                     @id @default(autoincrement())
  userId          Int
  subscriptionId  Int
  startDate       DateTime                @default(now())
  endDate         DateTime
  status          UserSubscriptionStatus  @default(active)
  limitAkun       Int                     @default(0)
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt

  user            User          @relation(fields: [userId], references: [id])
  subscription    Subscription  @relation(fields: [subscriptionId], references: [id])
  orders          Order[]
}

enum OrderStatus {
  pending
  paid
  failed
}

model Order {
  id                 Int       @id @default(autoincrement())
  userSubscriptionId Int
  amount             Float
  status             OrderStatus @default(pending)
  paymentMethod      String?
  transactionId      String?   @unique
  affiliateId        Int?
  createdAt          DateTime  @default(now())

  userSubscription   UserSubscription @relation(fields: [userSubscriptionId], references: [id])
  affiliate          Affiliate? @relation(fields: [affiliateId], references: [id])
  affiliateOrders    AffiliateOrder[]
}

model AffiliateOrder {
  id           Int      @id @default(autoincrement())
  affiliateId  Int
  orderId      Int
  komisi       Float    @default(0)
  status       KomisiStatus @default(pending)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  affiliate    Affiliate @relation(fields: [affiliateId], references: [id])
  order        Order     @relation(fields: [orderId], references: [id])
}

enum KomisiStatus {
  pending
  approved
  paid
  canceled
}

model PerformanceLiveStream {
  id                   Int      @id @default(autoincrement())
  title                String
  startTime            DateTime
  durationMs           Int
  statusCode           Int
  conversionRate       Float    @default(0.0000)
  totalViews           Int      @default(0)
  totalLikes           Int      @default(0)
  followersGrowth      Int      @default(0)
  productClicks        Int      @default(0)
  uniqueViewers        Int      @default(0)
  peakViewers          Int      @default(0)
  avgViewDuration      Float    @default(0.0)
  totalComments        Int      @default(0)
  addToCart            Int      @default(0)
  placedOrders         Int      @default(0)
  placedSalesAmount    Float    @default(0.0)
  confirmedOrders      Int      @default(0)
  confirmedSalesAmount Float    @default(0.0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  akunId               BigInt   // <---- Ubah ke BigInt
  akun                 Akun     @relation(fields: [akunId], references: [id])

  @@index([akunId])
  @@index([startTime])
}

